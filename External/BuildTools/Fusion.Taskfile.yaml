version: '3'


includes:
  conda: ./Conda.Taskfile.yaml
  files: ./Files.TaskFile.yaml
  git: ./Git.Taskfile.yaml


vars:
  FUSION_PYTHON: '' # Default empty string to allow for auto-detection
  FUSION_DEPS: ''   # Default empty string to allow for auto-detection


tasks:


  pin-python:
    desc: Pin the Python version to Fusion's.
    requires:
      vars: [ CONDA_PREFIX, FUSION_PYTHON ]
    vars:
      PINNED_FILE: '{{.CONDA_PREFIX}}/conda-meta/pinned'
      FUSION_PYTHON_AUTO:
        sh: |
          {
            echo '{{.FUSION_PYTHON}}'
            echo /*/Users/*/AppData/Local/Autodesk/webdeploy/production/*/Python/python.exe
            echo /mnt/*/Users/*/AppData/Local/Autodesk/webdeploy/production/*/Python/python.exe
            which python3
          } | grep -v '\*' | {
            while IFS= read -r line; do
              if [ -f "$line" ]; then
                echo "$line"
                break  # Found the first valid file, exit loop
              fi
            done
          }
      PYTHON_VERSION:
        sh: |
          '{{.FUSION_PYTHON_AUTO}}' --version | sed 's/Python //'

    preconditions:
      - sh: test -f '{{.FUSION_PYTHON_AUTO}}'
        msg: "Could not find Fusion's Python executable at: {{.FUSION_PYTHON_AUTO}}"
      - sh: test -n '{{.PYTHON_VERSION}}'
        msg: "Could not find Fusion's Python version."
    deps:
      - conda:ensure-prefix

    cmds:
      - task: files:touch-target
        vars: { TARGET: '{{.PINNED_FILE}}' }
      - sed -i '/^\s*python ==[0-9\.]\+\s*$/d' '{{.PINNED_FILE}}'
      - echo 'python =={{.PYTHON_VERSION}}' >> '{{.PINNED_FILE}}'
      - echo 'Python version pinned to {{.PYTHON_VERSION}}'


  copy-deps:
    desc: Copy Fusion's Python stubs.
    requires:
      vars: [ FUSION_DEPS ]
    vars:
      FUSION_DEPS_AUTO:
        sh: |
          {
            echo "{{.FUSION_DEPS}}"
            echo /*/Users/*'/AppData/Roaming/Autodesk/Autodesk Fusion 360/API/Python/defs'
            echo /mnt/*/Users/*'/AppData/Roaming/Autodesk/Autodesk Fusion 360/API/Python/defs'
          } | grep -v '\*' | {
            while IFS= read -r line; do
              if [ -d "$line" ]; then # Check for directory for stubs
                echo "$line"
                break
              fi
            done
          }
    preconditions:
      - sh: test -d "{{.FUSION_DEPS_AUTO}}"
        msg: "Could not find Fusion's Python stubs at: {{.FUSION_DEPS_AUTO}}"
    cmds:
      - mkdir -p .cache
      - cp -rf "{{.FUSION_DEPS_AUTO}}" .cache


  build-addin:
    desc: Builds the add-in.
    requires:
      vars: [ NAME, SOURCE, TARGET, PACKAGE_DIRS ]
    vars:
      TARGET: '{{.TARGET}}/{{.NAME}}'
      BUILD_VERSION: '{{if .BUILD_VERSION}}{{.BUILD_VERSION}}{{else}}{{.GIT_HASH_DIRTY}}{{end}}'
    preconditions:
      - sh: test -d '{{.SOURCE}}'
        msg: "Source directory does not exist: {{.SOURCE}}"
    cmds:
      - task: _build-manifest
      - task: _copy-main-scripts
      - for: PACKAGE_DIRS
        cmd: cp -rf '{{.ITEM}}' '{{.TARGET}}/Packages'


  _build-manifest:
    desc: Builds the add-in manifest.
    requires:
      vars: [
        NAME, SOURCE, TARGET, BUILD_VERSION,
        { name: DEBUG, enum: [ true, false ] }
      ]
    sources: 
      - '{{.SOURCE}}/manifest.template'
    cmds:
      - for: sources
        env:
          BUILD_VERSION: '{{.BUILD_VERSION}}'
          IS_DEBUG: '{{.DEBUG}}'
          NOT_DEBUG: '{{not .DEBUG}}'
        vars:
          SOURCE: '{{.ITEM}}'
          TARGET: '{{.TARGET}}/{{.NAME}}.manifest'
        task: files:envsubst


  _copy-main-scripts:
    desc: Copies the main add-in scripts to the target directory.
    requires:
      vars: [ NAME, SOURCE, TARGET ]
    sources: [
      '{{.SOURCE}}/{{.NAME}}.py',
      '{{.SOURCE}}/config.py',
    ]
    cmds:
      - for: sources
        cmd: cp -f '{{.ITEM}}' '{{.TARGET}}'

